module alu (
    A,B,ALUControl,Result
);

    //declaring inputs
    input [31:0] A,B;
    input [2:0] ALUControl;

    //declaring output
    output [31:0] Result;

    //interim wire declarations
    wire [31:0] a_and_b;
    wire [31:0] a_or_b;
    wire [31:0] not_b;
    wire [31:0] mux_1;
    wire [31:0] sum1;
    wire [31:0] mux_2;
    wire cout;  
    wire Z;   
    wire N;
    wire O;
    wire C;
    wire [31:0] slt;


//-----------------logic design------------------------

    //-->AND Operation
    assign a_and_b = A & B;

    //--> OR Operation
    assign a_or_b =A | B;

    //--> NOT Operation
    assign not_b = ~B;

    //-->Ternary Operator
    assign mux_1 = (ALUControl[0]== 1'b0) ? B:not_b;

    //-->sum operator with carry-out(using concatenation)
    assign {cout,sum1} = mux_1 + A + ALUControl[0];

    //Zero Extantion
    assign slt = {[31'0000000000000000000000000000000,sum1[31]]};

    //-->4:1 mux
    // assign mux_2 = (ALUControl[1] == 1'b0) ? sum :(ALUControl[0] == 1'b0) ? a_and_b : a_or_b;
    assign mux_2 =  (ALUControl[2:0]== 3'b000) ? sum :
                    (ALUControl[2:0]== 3'b001) ? sum :
                    (ALUControl[2:0]== 3'b010) ? a_and_b: 
                    (ALUControl[2:0]== 3'b011) ?a_or_b;
                    (ALUControl[2:0]== 3'b101) ?slt :32'h00000000;

    //final result
    assign Result =mux_2;

    //Flag Assignment
    //-->Zero Flag
    assign Z = &(-Result): //NAND Operations
    //-->Negative Flag
    assign N = Result[31]: //Maping 31 th bit of Result
    //-->Carry Flag
    assign C = cout & (-ALUControl[1]);
    //-->Overflow Flag
    assign O = (-ALUControl[1]) & (A [31]^ sum1[31]) & (-(A[31] ^ B[31] ^ ALUControl[0]));

endmodule
